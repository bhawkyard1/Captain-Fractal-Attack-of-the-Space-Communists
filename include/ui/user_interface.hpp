#ifndef USERINTERFACE_HPP
#define USERINTERFACE_HPP

#include <vector>
#include <array>
#include "vectors.hpp"
#include "selection.hpp"
#include "util.hpp"

//----------------------------------------------------------------------------------------------------------------------
/// \file user_interface.hpp
/// \brief Contains the userInterface class, contains the entire UI.
/// \author Ben Hawkyard
/// \version 1.0
/// \date 11/04/16
/// Revision History :
/// This is an initial version used for the game.
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
/// \brief Contains strings representing roman numerals from 1 to 10.
//----------------------------------------------------------------------------------------------------------------------
extern std::array< std::string, 10> g_ROMAN_NUMS;

namespace ui
{

//----------------------------------------------------------------------------------------------------------------------
/// \struct selectionReturn
/// \brief A utility struct, used to encapsulate menu and button which have just been clicked on.
//----------------------------------------------------------------------------------------------------------------------
struct selectionReturn
{
  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The selected menu index
  //----------------------------------------------------------------------------------------------------------------------
  int m_sel_val;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The selected button index.
  //----------------------------------------------------------------------------------------------------------------------
  int m_button_val;
};

//----------------------------------------------------------------------------------------------------------------------
/// \class userInterface
/// \brief Contains the entire UI.
//----------------------------------------------------------------------------------------------------------------------
class userInterface
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// \brief ctor for the userInterface class.
  //----------------------------------------------------------------------------------------------------------------------
  userInterface();

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Checks mouse position agains each menu in turn, returns selected menu and button.
  /// \param _pos position of the click.
  //----------------------------------------------------------------------------------------------------------------------
  selectionReturn handleInput(vec2 _pos);

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Adds a new menu to the UI.
  /// \param _s menu to add.
  //----------------------------------------------------------------------------------------------------------------------
  void add(const selection _s) {m_elements.push_back(_s);}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Returns a pointer to all of the menus. Used mostly to draw them, from inside the universe class.
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<selection> * getElements() {return &m_elements;}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Gets a menu from a specific index.
  /// \param _i index to retrieve from.
  //----------------------------------------------------------------------------------------------------------------------
  selection getElement(size_t _i) {return m_elements[_i];}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Resets the UI to its initial state.
  //----------------------------------------------------------------------------------------------------------------------
  void reset();

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Updates all the menus, and all of their buttons.
  /// \param _s current score.
  //----------------------------------------------------------------------------------------------------------------------
  void update(int _s);

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Clears the UI.
  //----------------------------------------------------------------------------------------------------------------------
  void clear() {m_elements.clear();}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Removes a specific menu from the UI.
  /// \param _i index to remove.
  //----------------------------------------------------------------------------------------------------------------------
  void remove(int _i) {swapnpop(&m_elements, _i);}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Removes the last menu in m_elements.
  //----------------------------------------------------------------------------------------------------------------------
  void pop() {m_elements.pop_back();}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Sets a whole menu to either clickable or unclickable.
  /// \param _i index of menu.
  /// \param _dark clickability.
  //----------------------------------------------------------------------------------------------------------------------
  void setDark(int _i, bool _dark) {for(auto &i : *m_elements[_i].getButtons()) i.setDark(_dark);}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Sets a specific buttons clickability.
  /// \param _sel menu index.
  /// \param _btn button index.
  /// \param _dark clickability.
  //----------------------------------------------------------------------------------------------------------------------
  void setDark(int _sel, int _btn, bool _dark) {(*m_elements[_sel].getButtons())[_btn].setDark(_dark);}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Container of menus.
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<selection> m_elements;
};

}

#endif
