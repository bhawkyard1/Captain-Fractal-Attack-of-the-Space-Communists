#ifndef BUTTON_HPP
#define BUTTON_HPP

#include <array>
#include <string>
#include "vectors.hpp"

//----------------------------------------------------------------------------------------------------------------------
/// \file button.hpp
/// \brief Contains the button class, used to create UIs.
/// \author Ben Hawkyard
/// \version 1.0
/// \date 11/04/16
/// Revision History :
/// This is an initial version used for the game.
/// \class button
/// \brief Contains attributes such as colour, label and position.
//----------------------------------------------------------------------------------------------------------------------

enum buttonState {BUTTON_STATE_DEFAULT, BUTTON_STATE_OVER, BUTTON_STATE_DOWN, BUTTON_STATE_DISABLED};

class button
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// \brief ctor for the button class.
    //----------------------------------------------------------------------------------------------------------------------
    button();

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief ctor for the button class.
    /// \param _label button text.
    /// \param _pcol background colour.
    /// \param _tcol text colour.
    /// \param _pos position.
    /// \param _dim dimensions.
    //----------------------------------------------------------------------------------------------------------------------
    button(const std::string _label,const std::array<int, 4> _pcol,const std::array<int, 4> _tcol,const vec2 _pos, const vec2 _dim);

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief ctor for the button class.
    /// \param _label button text.
    /// \param _pcol background colour.
    /// \param _tcol text colour.
    /// \param _pos position.
    /// \param _dim dimensions.
    /// \param _smul size mult for the button text.
    //----------------------------------------------------------------------------------------------------------------------
    button(const std::string _label, const std::array<int, 4> _pcol, const std::array<int, 4> _tcol, const vec2 _pos, const vec2 _dim, const float _smul);

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief ctor for the button class.
    /// \param _label button text,
    /// \param _pcol background colour.
    /// \param _tcol text colour.
    /// \param _pos position.
    /// \param _dim dimensions.
    /// \param _pcost button cost.
    //----------------------------------------------------------------------------------------------------------------------
    button(const std::string _label, std::array<int, 4> _pcol, std::array<int, 4> _tcol, vec2 _pos, vec2 _dim, int _pcost);

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Selects the button.
    //----------------------------------------------------------------------------------------------------------------------
    void select();

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Setter for m_label.
    //----------------------------------------------------------------------------------------------------------------------
    ///
    /// \brief updateText
    /// \param _str
    ///
    void updateText(const std::string _str);

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for m_selected.
    //----------------------------------------------------------------------------------------------------------------------
    void set(bool s) {m_selected = s;}
    bool on() {return m_selected;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Updates the button.
    /// \param _s current score.
    /// \param _mouse current mouse position.
    //----------------------------------------------------------------------------------------------------------------------
    void update(int _s, const vec2 _mouse);

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for cost.
    //----------------------------------------------------------------------------------------------------------------------
    int getCost() {return m_cost;}
    void setCost(int pcost) {m_cost = pcost;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for state.
    //----------------------------------------------------------------------------------------------------------------------
    void setDark(bool b);
    void setState(const buttonState _state) {m_state = _state;}
    buttonState getState() {return m_state;}
    bool isDark() {return m_state == BUTTON_STATE_DISABLED;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for position.
    //----------------------------------------------------------------------------------------------------------------------
    vec2 getPos() {return m_pos;}
    void setPos(const vec2 _pos) {m_pos = _pos;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for dimensions.
    //----------------------------------------------------------------------------------------------------------------------
    vec2 getDim() {return m_dim;}
    void setDim(const vec2 _dim) {m_dim = _dim;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter for draw colour.
    //----------------------------------------------------------------------------------------------------------------------
    std::array<float, 4> getDrawCol() {return m_dcol;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for background colour.
    //----------------------------------------------------------------------------------------------------------------------
    std::array<int, 4> getCol() {return m_col;}
    void setCol(std::array<int, 4> _col) {m_col = _col;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for text colour.
    //----------------------------------------------------------------------------------------------------------------------
    std::array<int, 4> getTCol() {return m_tcol;}
    void setTCol(std::array<int, 4> _tcol) {m_tcol = _tcol;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter and setter for label.
    //----------------------------------------------------------------------------------------------------------------------
    std::string getLabel() {return m_label;}
    void setLabel(const std::string _label) {m_label = _label;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Resets the button to its initial state.
    //----------------------------------------------------------------------------------------------------------------------
    void reset();

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Getter for text size multiplier.
    //----------------------------------------------------------------------------------------------------------------------
    float getTextSizeMul() {return m_smul;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Setter for start.
    //----------------------------------------------------------------------------------------------------------------------
    void setStart(vec2 _start) {m_start = _start;}

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Setter for end.
    //----------------------------------------------------------------------------------------------------------------------
    void setEnd(vec2 _end) {m_end = _end;}

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Whether the button is currently selected.
    //----------------------------------------------------------------------------------------------------------------------
    bool m_selected = false;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Colour of the button when clickable (first 4) and unclickable (last 4).
    //----------------------------------------------------------------------------------------------------------------------
    std::array<int, 4> m_col;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Colour of the text when clickable (first 4) and unclickable (last 4).
    //----------------------------------------------------------------------------------------------------------------------
    std::array<int, 4> m_tcol;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Variable for the current draw colour.
    //----------------------------------------------------------------------------------------------------------------------
    std::array<float, 4> m_dcol;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Label when the button was initialised.
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_initLabel;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Current label.
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_label;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Cost when the button was intialised.
    //----------------------------------------------------------------------------------------------------------------------
    int m_initCost;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Current cost.
    //----------------------------------------------------------------------------------------------------------------------
    int m_cost;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The state of the button.
    //----------------------------------------------------------------------------------------------------------------------
    buttonState m_state;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The position of the button.
    //----------------------------------------------------------------------------------------------------------------------
    vec2 m_pos;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The dimensions of the button.
    //----------------------------------------------------------------------------------------------------------------------
    vec2 m_dim;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The scale multiplier for the button label.
    //----------------------------------------------------------------------------------------------------------------------
    float m_smul;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The position of the button when the interpolant is 0.
    //----------------------------------------------------------------------------------------------------------------------
    vec2 m_start;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The position of the button when the interpolant is 1.
    //----------------------------------------------------------------------------------------------------------------------
    vec2 m_end;
};
#endif
