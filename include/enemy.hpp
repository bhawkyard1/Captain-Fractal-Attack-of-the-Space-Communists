#ifndef ENEMY_HPP
#define ENEMY_HPP

#include "ship.hpp"
#include "vectors.hpp"

//----------------------------------------------------------------------------------------------------------------------
/// \brief The goals that a ship can have
//----------------------------------------------------------------------------------------------------------------------
enum aiGoal{GOAL_IDLE, GOAL_CONGREGATE, GOAL_AVOID, GOAL_ATTACK, GOAL_FLEE, GOAL_TURRET, GOAL_SPACE_STATION};

//----------------------------------------------------------------------------------------------------------------------
/// \brief The teams that a ship can be on
//----------------------------------------------------------------------------------------------------------------------
enum aiTeam{TEAM_PLAYER, TEAM_PLAYER_MINER, GALACTIC_FEDERATION, SPOOKY_SPACE_PIRATES, SPACE_COMMUNISTS, NEUTRAL, NONE};

//----------------------------------------------------------------------------------------------------------------------
/// \file enemy.hpp
/// \brief This class is a ship with a brain, able to steer and react to input stimuli.
/// \author Ben Hawkyard
/// \version 1.0
/// \date 11/04/16
/// Revision History :
/// This is an initial version used for the game.
/// \class enemy
/// \brief Builds upon the ship class, adding variables like team, goal, targets etc.
//----------------------------------------------------------------------------------------------------------------------

class enemy: public ship
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// \brief ctor for the enemy class
  /// \param _p position
  /// \param _v velocity
  /// \param _type the ship type (defined in the ship header)
  /// \param _team the ai team of this agent
  //----------------------------------------------------------------------------------------------------------------------
  enemy(const vec3 _p, const vec3 _v, const ship_spec _type, const aiTeam _team);

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Getter and setter for curent goal
  //----------------------------------------------------------------------------------------------------------------------
  void setGoal(aiGoal _g) {m_curGoal = _g;}
  aiGoal getGoal() {return m_curGoal;}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Updates the behaviour of the agent, based on any target it has, and its relative position
  /// \param _dt time difference since last update
  //----------------------------------------------------------------------------------------------------------------------
  void behvrUpdate(float _dt);

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Applies forces to the agent, attempting to steer it towards the target
  //----------------------------------------------------------------------------------------------------------------------
  void steering();

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Getter and setter for the team
  //----------------------------------------------------------------------------------------------------------------------
  aiTeam getTeam() const {return m_team;}
  void setTeam(const aiTeam _t) {m_team = _t;}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Getter and setter for the target
  //----------------------------------------------------------------------------------------------------------------------
  ship * getTarget() const {return m_target;}
  void setTarget(ship * _t) {m_target = _t;}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Getters and setters for confidence
  //----------------------------------------------------------------------------------------------------------------------
  float getConfidence() {return m_confidence;}
  void setConfidence(float c) {m_confidence = c;}
  void decrConfidence(float d) {m_confidence -= d;}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Getter and setter for squad id
  //----------------------------------------------------------------------------------------------------------------------
  int getSquadID() const {return m_squadID;}
  void setSquadID(int _id) {m_squadID = _id;}

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief Getter and setter for the target position
  //----------------------------------------------------------------------------------------------------------------------
  void setTPos(vec3 _tPos) {m_tPos = _tPos;}
  void setTVel(vec3 _tVel) {m_tVel = _tVel;}
private:
  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The target position
  //----------------------------------------------------------------------------------------------------------------------
  vec3 m_tPos;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The target velocity
  //----------------------------------------------------------------------------------------------------------------------
  vec3 m_tVel;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The current goal
  //----------------------------------------------------------------------------------------------------------------------
  aiGoal m_curGoal;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief A reference to the current target. Since the target need not be another enemy, it is of type ship
  //----------------------------------------------------------------------------------------------------------------------
  ship * m_target;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The distance this agent will attempt to hold around its target
  //----------------------------------------------------------------------------------------------------------------------
  float m_stopDist;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The confidence. If this drops too low, the enemy will flee
  //----------------------------------------------------------------------------------------------------------------------
  float m_confidence;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The team of the ship
  //----------------------------------------------------------------------------------------------------------------------
  aiTeam m_team;

  //----------------------------------------------------------------------------------------------------------------------
  /// \brief The id of this agents' squad
  //----------------------------------------------------------------------------------------------------------------------
  int m_squadID;
};

#endif
