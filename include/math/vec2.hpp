#ifndef VEC2_HPP
#define VEC2_HPP

#include <math.h>
#include "geometry.hpp"

struct vec3;

//----------------------------------------------------------------------------------------------------------------------
/// \struct A 2d vector, holds an x and y component, and has overloaded operators to make the syntax nicer.
//----------------------------------------------------------------------------------------------------------------------
struct vec2
{
    //----------------------------------------------------------------------------------------------------------------------
    /// \brief X component.
    //----------------------------------------------------------------------------------------------------------------------
    float m_x;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Y component.
    //----------------------------------------------------------------------------------------------------------------------
    float m_y;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief In-place operators.
    //----------------------------------------------------------------------------------------------------------------------
    vec2& operator=(const vec2 &_rhs) { m_x = _rhs.m_x; m_y = _rhs.m_y; return *this; }
    vec2 operator+=(vec2 _rhs) { m_x += _rhs.m_x; m_y += _rhs.m_y; return *this; }
    vec2 operator-=(vec2 _rhs) { m_x -= _rhs.m_x; m_y -= _rhs.m_y; return *this; }
    vec2& operator-=(float &_rhs) { m_x -= _rhs; m_y -= _rhs; return *this; }
    vec2& operator*=(const float &_rhs) { m_x *= _rhs; m_y *= _rhs; return *this; }
    vec2& operator/=(float _rhs) { m_x /= _rhs; m_y /= _rhs; return *this; }

    vec2():
        m_x(0.0f),
        m_y(0.0f)
    {}

    vec2(const float _x, const float _y):
        m_x(_x),
        m_y(_y)
    {}
};

//----------------------------------------------------------------------------------------------------------------------
/// \brief More operators.
//----------------------------------------------------------------------------------------------------------------------
vec2 operator +(const vec2 &_lhs, const vec2 &_rhs);
vec2 operator +(const vec2 &_lhs, const float &_rhs);
vec2 operator +(const float &_lhs, const vec2 &_rhs);
vec2 operator -(const vec2 &_lhs, const vec2 &_rhs);
vec2 operator -(const vec2 &_lhs);
vec2 operator *(const vec2 &_lhs, const vec2 &_rhs);
vec2 operator *(const vec2 &_lhs, const float &_rhs);
vec2 operator *(const float &_lhs, const vec2 &_rhs);
vec2 operator /(const vec2 &_lhs, const vec2 &_rhs);
vec2 operator /(const vec2 &_lhs, const float &_rhs);
vec2 operator ^(const vec2 &_lhs, const float &_rhs);
bool operator ==(const vec2 &_lhs, const vec2 &_rhs);
bool operator !=(const vec2 &_lhs, const vec2 &_rhs);

float sum(vec2 _vec);
float crossProd(const vec2 A, const vec2 B);
vec2 crossProd(const vec2 A, const float B);
vec2 crossProd(const float A, const vec2 B);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Converts vectors to angles.
//----------------------------------------------------------------------------------------------------------------------
float ang(const vec2 vec);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Returns the length of a vector. Where possible, use magns().
//----------------------------------------------------------------------------------------------------------------------
float mag(const vec2 vec);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Returns the squared length of a vector.
//----------------------------------------------------------------------------------------------------------------------
float magns(const vec2 vec);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Returns the reciprocal of the length of a vector.
//----------------------------------------------------------------------------------------------------------------------
float invMag(const vec2 vec);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Normalises a given vector.
//----------------------------------------------------------------------------------------------------------------------
vec2 unit(const vec2 vec);

vec2 clamp(const vec2 _in, vec2 _min, vec2 _max);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Returns the normal of a 2d vector.
//----------------------------------------------------------------------------------------------------------------------
vec2 normal(const vec2 vec);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Returns the dot of two vectors.
//----------------------------------------------------------------------------------------------------------------------
float dot(const vec2 A, const vec2 B);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Given a point p1 and a gradients m1, and the general point p2, will find the point on p1 + t(m1) closest to p2.
/// \param _p1 line point, _m1 gradient, _p2 general point.
//----------------------------------------------------------------------------------------------------------------------
vec2 closest(const vec2 p1, const vec2 m1, const vec2 p2);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Converts a 2d vector to 3d and vice versa.
//----------------------------------------------------------------------------------------------------------------------
vec3 tovec3(const vec2 vec);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Converts an angle to a 2d vector.
//----------------------------------------------------------------------------------------------------------------------
vec2 vec(const float ang);

//----------------------------------------------------------------------------------------------------------------------
/// \brief Converts a 2d vector to an angle.
//----------------------------------------------------------------------------------------------------------------------
float angle(const vec2 vec);


#endif
